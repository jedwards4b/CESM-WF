#! /usr/bin/env python
import os, sys, glob, shutil, subprocess, configparser
import distutils.dir_util
import json

#global variables defined in cesm_cylc.config
cesm_code_base = ""
# Central location for all of your cylc suites (it is recomended to keep this the same for all cylc suites)
suite_location = ""
# Email address to have cylc send wf status updates as it runs
email = ""
# svn username
svn_username = ""
use_db = False
cesm_xml={}
pp_xml = {}

# Machine to run pp on (geyser, cheyenne)
ppmach = None


# Set to 'True' or 'False' if this is a WACCM run
# If set to true, this will modify some of the CESM-CMIP6 requested variable definitions (no other effect)
cesm_runtype = {"WACCM_RUN":False, "HIRES_RUN": False, "CLM_RUN":False}


# Add a specific queue to use.  Set to 'None' if you want the default.  Set to 'queue name' if you want a specific queue.
queue = 'None'


def main(argv=None):
    cesm_cylc_config_file = "cesm_cylc.config"
    if not os.path.isfile(cesm_cylc_config_file):
	print '\033[91m','Error: No config file found','\033[0m'
	sys.exit()        

    _read_cesm_cylc_config(cesm_cylc_config_file)
    create(cesm_code_base, testing=False)

def _read_cesm_cylc_config(config_file):
    global cesm_code_base, pp_xml, cesm_xml, use_db, suite_location, svn_username, email, ppmach

    cesm_cylc_config = configparser.SafeConfigParser()
    cesm_cylc_config.read(config_file)
    if cesm_cylc_config.has_section('main'):
        if cesm_cylc_config.has_option('main', 'CESMROOT'):
            cesm_code_base = os.path.expandvars(cesm_cylc_config.get('main', 'CESMROOT'))
        if cesm_cylc_config.has_option('main', 'email'):
            email = os.path.expandvars(cesm_cylc_config.get('main', 'email'))
        if cesm_cylc_config.has_option('main', 'SUITE_OUTPUT_ROOT'):
            suite_location = os.path.expandvars(cesm_cylc_config.get('main', 'SUITE_OUTPUT_ROOT'))
        if cesm_cylc_config.has_option('main', 'machine'):
            ppmach = os.path.expandvars(cesm_cylc_config.get('main', 'machine'))
            print "machine is {}".format(ppmach)
        for runtype in ('WACCM_RUN','HIRES_RUN','CLM_RUN'):
            if cesm_cylc_config.has_option('main', runtype):
                if cesm_cylc_config.get('main', runtype).upper() == "TRUE":
                    cesm_runtype[runtype] = True
                else:
                    cesm_runtype[runtype] = False
                    


            
    if cesm_cylc_config.has_section('pp_input'):
        for item, value in cesm_cylc_config.items('pp_input'):
            if item == 'postprocess_path':
                os.environ[item.upper()] = os.path.expandvars(cesm_cylc_config.get('pp_input', 'POSTPROCESS_PATH'))
                os.environ['POSTPROCESS_PATH_GEYSER'] = os.environ.get(item.upper())
            else:
                pp_xml[item] = os.path.expandvars(value)
#            if pp_xml[item].upper() == "TRUE":
#                pp_xml[item] = True
#            elif pp_xml[item].upper() == "FALSE":
#                pp_xml[item] = False

    if cesm_cylc_config.has_section('cesm_input'):
        for item, value in cesm_cylc_config.items('cesm_input'):
            cesm_xml[item] = os.path.expandvars(value)
#            if cesm_xml[item].upper() == "TRUE":
#                cesm_xml[item] = True
#            elif cesm_xml[item].upper() == "FALSE":
#                cesm_xml[item] = False
                
    if cesm_cylc_config.has_section('experiment_db'):
        if cesm_cylc_config.has_option('experiment_db', 'use_db'):
            use_db_string = cesm_cylc_config.get('experiment_db', 'use_db')
            if use_db_string.upper() == "TRUE":
                use_db = True
            if cesm_cylc_config.has_option('experiment_db', 'svn_username'):
                svn_username = cesm_cylc_config.get('experiment_db', 'svn_username')

            
def create(cesm_code_base, testing=True, command=None):
    #############################################################################
    #
    # Do not make any changes below this line
    #
    #############################################################################

    cdir = os.getcwd()
    print '############################################'
    print ''
    print '   Create CESM Case'
    print '   Using code base: '+cesm_code_base
    print ''
    print '############################################'
    print ''
    os.chdir(cesm_code_base+'/cime/scripts/')
    if command == None:
        new_case = ' '.join(sys.argv)
    else:
        new_case = command
    new_case = new_case.replace(os.path.basename(__file__),'create_newcase')
    err=os.system(new_case)
    if err!=0:
	print '\033[91m','Error: Failed to create new CESM case.','\033[0m'
	print '\033[91m','Tried running: ',new_case,'\033[0m'
	sys.exit()
    for i in range(0, len(sys.argv)):
	if '-case' in sys.argv[i]:
	    case_root = sys.argv[i+1]
    os.chdir(case_root)
    case_root = os.getcwd()
    ppbin = os.path.join(os.environ['POSTPROCESS_PATH'],'cesm-env2','bin')
    activate_file = os.path.join(ppbin, 'activate_this.py')

    if os.path.isfile(activate_file):
	print '############################################'
	print ''
	print '   Create CESM Postprocessing'
        print '   Using '+os.environ['POSTPROCESS_PATH']+'/cesm-env2'
	print ''
	print '############################################'
	print ''
	# Save old values
	old_os_path = os.environ['PATH']
	old_sys_path = list(sys.path)
	old_sys_prefix = sys.prefix
        print "PYTHONPATH before activate {}".format(os.environ['PYTHONPATH'])
	execfile(activate_file, dict(__file__=activate_file))
        print "PYTHONPATH after activate {}".format(os.environ['PYTHONPATH'])
        print "Run create_postprocess with caseroot {} from {}".format(case_root, ppbin)
        err=os.system('create_postprocess -caseroot '+case_root)
        if err:
	    print '\033[91m','Error: Failed to create post processing','\033[0m'
	    print '\033[91m','Tried running: ','create_postprocess -caseroot '+case_root,'\033[0m'
	    sys.exit()

        global use_db
        if use_db:
            print '############################################'
            print ''
            print '   Getting experiment details from the db   '
            print ''
            print '############################################'
            print ''
            case_name = os.path.basename(os.path.normpath(case_root))

            err=os.system("./archive_metadata --query_cmip6 "+case_name+"  db.json --user "+svn_username+" --password --expType CMIP6")
            if err!=0:
                print '\033[91m','Error: Failed in call to the db to get exp information','\033[0m'
                sys.exit()
            db_file = os.path.join(case_root,"archive_files","db.json")
            #db_file = '/gpfs/fs1/work/mickelso/testing/CESM-WF/db.json'
            #db_file = "/glade/work/jedwards/sandboxes/cesm2_1/cime/scripts/db.json"

            print '############################################'
            print ''
            print '   Figuring out which variables need to be '
            print '   output by CESM'
            print ''
            print '############################################'
            print ''
            # while virtual env is activated, get the cesm variable lists for the output we need the model to write
            with open(db_file) as db:
                db_info = json.load(db)
            exp_name = db_info["experiment_id"]
            err=os.system(cdir+'/src/get_model_vars -e '+ exp_name+' -d /glade/p/cesm/conform-input/cmip6_input/')
            if err!=0:
                print '\033[91m','Error: Failed to create variable lists','\033[0m'
                print '\033[91m','Tried running: ','./get_model_vars -h '+ exp_name,'\033[0m'
                sys.exit()
	    # Get old values back
	    os.environ['PATH'] = old_os_path
	    sys.prefix = old_sys_prefix
	    sys.path[:0] = old_sys_path


    print '############################################'
    print ''
    print '   Set XML Variables'
    print ''
    print '############################################'
    print ''
    for k,v in cesm_xml.iteritems():
	print 'Setting ',k,' to ',v
	err=os.system('./xmlchange '+k+'='+v)
	if err!=0:
	    print '\033[91m','Error: Failed to change an xml variable','\033[0m'
	    print '\033[91m','Tried running: ','./xmlchange '+k+'='+v,'\033[0m'
	    sys.exit()
    if os.path.isdir(case_root+'/postprocess/'):
	os.chdir(case_root+'/postprocess/')
	for k,v in pp_xml.iteritems():
	    print 'Setting ',k,' to ',v
	    err=os.system('./pp_config --set '+k+'='+v)
	    if err!=0:
		print '\033[91m','Error: Failed to change a post processing xml variable','\033[0m'
		print '\033[91m','Tried running: ','./pp_config --set '+k+'='+v,'\033[0m'
		sys.exit()

    print '############################################'
    print ''
    print '   Run case.setup'
    print ''
    print '############################################'
    print ''
    os.chdir(case_root)
    err=os.system('./case.setup')
    if err!=0:
	print '\033[91m','Error: Failed in call to case.setup','\033[0m'
	sys.exit()

    os.chdir(case_root+'/postprocess/')
    conform = subprocess.check_output('./pp_config -value -caseroot '+case_root+'/postprocess/'+' --get STANDARDIZE_TIMESERIES', shell=True)
    conform = 'FALSE'
    if 'TRUE' in conform:
        print '############################################'
        print ''
        print '   Run iconform'
        print ''
        print '############################################'
        print ''

        # if running a waccm run, change the value of the definition file to be for the waccm def set
        if cesm_runtype['WACCM_RUN']:
            err=os.system('./pp_config --set CONFORM_CESM_DEFINITIONS=/glade/p/cesm/conform-input/cmip6_input/CESM_WACCM_MastList.def')
            err=os.system('./pp_config --set CONFORM_GLOBAL_ATTRIBUTES=/glade/p/cesm/conform-input/cmip6_input/CESM_CMIP6_WACCM.ga')
            if err!=0:
                print '\033[91m','Error: Failed to change a post processing xml variable','\033[0m'
                print '\033[91m','Tried running: ','./pp_config --set CONFORM_CESM_DEFINITIONS=/glade/p/cesm/conform-input/cmip6_input/CESM_WACCM_MastList.def','\033[0m'
                sys.exit()
        if cesm_runtype['HIRES_RUN']:
            err=os.system('./pp_config --set CONFORM_CESM_DEFINITIONS=/glade/p/cesm/conform-input/cmip6_input/CESM_HIRES_MastList.def')
            if err!=0:
                print '\033[91m','Error: Failed to change a post processing xml variable','\033[0m'
                print '\033[91m','Tried running: ','./pp_config --set CONFORM_CESM_DEFINITIONS=/glade/p/cesm/conform-input/cmip6_input/CESM_HIRES_MastList.def','\033[0m'
                sys.exit()
        if cesm_runtype['CLM_RUN']:
            err=os.system('./pp_config --set CONFORM_CESM_DEFINITIONS=/glade/p/cesm/conform-input/cmip6_input/CESM_CLM_MastList.def')
            if err!=0:
                print '\033[91m','Error: Failed to change a post processing xml variable','\033[0m'
                print '\033[91m','Tried running: ','./pp_config --set CONFORM_CESM_DEFINITIONS=/glade/p/cesm/conform-input/cmip6_input/CESM_CLM_MastList.def','\033[0m'
                sys.exit()

        with open(db_file) as db:
            db_info = json.load(db)
        exp_name = db_info["experiment_id"]

        conform_vars = {
            'CONFORM_JSON_DIRECTORY': case_root+'/postprocess/',
            'CONFORM_EXP_NAME': exp_name
        }
        for k,v in conform_vars.iteritems():
            print 'Setting ',k,' to ',v
            err=os.system('./pp_config --set '+k+'='+v)
            if err!=0:
                print '\033[91m','Error: Failed to change a post processing xml variable','\033[0m'
                print '\033[91m','Tried running: ','./pp_config --set '+k+'='+v,'\033[0m'
                sys.exit()

        err=os.system('./iconform')
        if err!=0:
            print '\033[91m','Error: Failed in call to iconform','\033[0m'
            sys.exit()


#    if build == True or build == 'TRUE' or build == 'true':
#	print '############################################'
#	print ''
#	print '   Run case.build'
#	print ''
#	print '############################################'
#	print ''
#	os.chdir(case_root)
#	err=os.system('execca ./case.build')
#	if err!=0:
#	    print '\033[91m','Error: Failed in call to case.build','\033[0m'
#	    sys.exit()

    if use_db and not testing:
        print '############################################'
        print ''
        print '   Archive the case in the db   '
        print ''
        print '############################################'
        print ''
        os.chdir(case_root)
        err=os.system("./archive_metadata --user "+svn_username+" --password --expType CMIP6")
        if err!=0:
            print '\033[91m','Error: Failed in call to archive the case to the db','\033[0m'
            sys.exit()

    # Toggle to build the case
    build = 'False' #True or False
    print '############################################'
    print ''
    print '   Setup Cylc Automation'
    print ''
    print '############################################'
    print ''
    global ppmach
    os.chdir(cdir+'/src/')
    case_name = os.path.basename(os.path.normpath(case_root))
    err=os.system('./CESM_Cylc_setup -c '+ cesm_code_base+'/cime/'+' -p '+suite_location+'/'+case_name+' -b '+build+' -s '+case_name+'.suite.cmip6'+' -d '+case_root+' -u '+svn_username+' -g workflow.png'+' -e '+email+' -m '+ppmach+' -q '+queue)

    os.chdir(cdir)

    if not testing:

        outf = open(case_root+"/Cylc.Instructions.txt","w")
        outf.write( '##########################################################################\n')
        outf.write( '\n')
        outf.write( '   New CESM case created with Post Processing and Cylc Suite Enabled in\n')
        outf.write( '     '+case_root+'\n')
        outf.write( '  \n')
        outf.write( '   Next steps: \n')
        if build == False or build == 'FALSE' or build == 'false':
            outf.write( '               - build the case\n')
        outf.write( '               - open this file to make sure the workflow looks as expected: '+suite_location+'/'+case_name+'/workflow.png\n')
        outf.write( '                  - if the workflow is not what you expect, cd into your new case directory, modify cesm xml env, and run: \n')
        outf.write( '                    '+cdir+'/src/CESM_Cylc_setup -c '+ cesm_code_base+'/cime/'+' -p '+suite_location+'/'+case_name+' -s '+case_name+'.suite'+' -d '+case_root+' -u '+svn_username+' -g workflow.png'+' -e '+email+' -m '+ppmach+' -q '+queue+'\n')
        outf.write( '               - execute: gcylc '+case_name+'.suite.cmip6\n')
        outf.write( '\n')
        outf.write( '#########################################################################\n')
        outf.write( '\n')
        outf.close()


	print '##########################################################################'
	print ''
	print '   New CESM case created with Post Processing and Cylc Suite Enabled in'
	print '     '+case_root
	print '  '
	print '   Next steps: '
	if build == False or build == 'FALSE' or build == 'false':
	    print '               - build the case'
	print '               - open this file to make sure the workflow looks as expected: '+suite_location+'/'+case_name+'/workflow.png'
	print '                  - if the workflow is not what you expect, cd into your new case directory, modify cesm xml env, and run: '
	print '                    '+cdir+'/src/CESM_Cylc_setup -c '+ cesm_code_base+'/cime/'+' -p '+suite_location+'/'+case_name+' -s '+case_name+'.suite'+' -d '+case_root+' -u '+svn_username+' -g workflow.png'+' -e '+email+' -m '+ppmach+' -q '+queue
	print '               - execute: gcylc '+case_name+'.suite.cmip6'
	print ''
        print '   These instructions have also been written to '+case_root+"/Cylc.Instructions.txt"
	print '#########################################################################'
	print ''


if __name__ == '__main__':
    main()
